// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package twui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/sittellalab/templwind/pkg/twlib"
import "github.com/Oudwins/tailwind-merge-go/pkg/twmerge"

type SpinnerIcon string

const (
	// To change the main border color, change the current text color.
	// To change the accent border color, change the border bottom color.
	ClassicSpinner SpinnerIcon = "border-[1em] border-current border-b-blue-700 rounded-full h-full w-full animate-spin"

	// To change the outer border color, change the border left color.
	// To change the inner border color, change the after border right color.
	ContraSpinner SpinnerIcon = "relative border-[1em] border-transparent border-l-current rounded-full h-full w-full animate-spin after:absolute after:content-[''] after:border-[1em] after:border-transparent after:border-r-blue-700 after:rounded-full after:h-full after:w-full after:animate-[spin_0.5s_linear_infinite_reverse]"

	// To change the color, change the current text color.
	ChatSpinner SpinnerIcon = "relative text-blue-700 rounded-full h-[1em] w-[1em] animate-[flash_0.5s_ease-out_infinite_alternate]"

	// To change the color, change the current text color.
	BarSpinner SpinnerIcon = "relative text-blue-700 h-[0.25em] w-[1em] before:absolute before:translate-y-[-1.25em] before:content-[''] before:bg-blue-600 before:h-[3em] before:w-[1em] before:animate-[jump-outer-odd_1.2s_ease-in-out_infinite] after:absolute after:translate-y-[-1.25em] after:content-[''] after:bg-blue-600 after:h-[3em] after:w-[1em] after:animate-[jump-outer-even_1.2s_ease-in-out_infinite]"

	RainbowSpinner SpinnerIcon = "relative h-[0.25em] w-[1em] before:absolute before:translate-y-[-1.25em] before:content-[''] before:h-[3em] before:w-[1em] before:animate-[rainbow-outer-odd_1.2s_ease-in-out_infinite] after:absolute after:translate-y-[-1.25em] after:content-[''] after:h-[3em] after:w-[1em] after:animate-[rainbow-outer-even_1.2s_ease-in-out_infinite]"
)

type SpinnerSize string

const (
	SpinnerXS SpinnerSize = "text-[2px] h-4 w-4"
	SpinnerSM SpinnerSize = "text-[4px] h-8 w-8"
	SpinnerMD SpinnerSize = "text-[6.5px] h-12 w-12"
	SpinnerLG SpinnerSize = "text-[9px] h-16 w-16"
	SpinnerXL SpinnerSize = "text-[11px] h-20 w-20"
)

type SpinnerProps struct {
	// Optional: Adds classes to the class attribute. Any tailwind clashes with existing classes will be overwritten.
	Class string

	// Optional: Specifies the Spinner icon to use, defaults to ClassicSpinner.
	Icon SpinnerIcon

	// Optional: Specifies the Spinner size, defaults to SpinnerXS.
	Size SpinnerSize

	// Optional: Applies htmx indicator request style handling automatically.
	// See https://htmx.org/attributes/hx-indicator for more details.
	HtmxIndicator bool
}

// Spinner renders an animated loading spinner for a variety of loading contexts
func Spinner(props SpinnerProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var2 = []any{
			"inline-block align-middle",
			templ.KV("htmx-indicator", props.HtmxIndicator),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div aria-label=\"Loading Icon\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/twui/spinner.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 = []any{
			"flex justify-center items-center leading-0",
			string(twlib.Coalesce(props.Size, SpinnerXS)),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div aria-hidden=\"true\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/twui/spinner.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 = []any{
			twmerge.Merge(
				"inline-block",
				string(twlib.Coalesce(props.Icon, ClassicSpinner)),
			),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var6...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<span class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var6).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/twui/spinner.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"></span></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
